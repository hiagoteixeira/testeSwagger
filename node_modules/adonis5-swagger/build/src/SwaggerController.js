"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwaggerController = void 0;
const mime_1 = __importDefault(require("mime"));
const buildJsDocConfig_1 = __importDefault(require("./Utils/buildJsDocConfig"));
const swagger_jsdoc_1 = __importDefault(require("swagger-jsdoc"));
const fs_1 = require("fs");
const path_1 = require("path");
class SwaggerController {
    constructor(IoC) {
        this.IoC = IoC;
        this.swaggerFileContent = null;
        this.config = IoC.use('Adonis/Core/Config');
    }
    async swaggerUI({ params, response }) {
        const swaggerUiAssetPath = this.config.get('swagger.swaggerUiDistPath') || require('swagger-ui-dist').getAbsoluteFSPath();
        if (!params.fileName) {
            return response.redirect('/docs/index.html');
        }
        let fileName = params.fileName ? params.fileName : 'index.html';
        const path = path_1.join(swaggerUiAssetPath, fileName);
        const contentType = mime_1.default.getType(path);
        let data = await fs_1.promises.readFile(path, 'utf-8');
        if (fileName.includes('index.html')) {
            //replace default host from index.html
            data = data.replace('https://petstore.swagger.io/v2/swagger.json', this.config.get('swagger.specUrl'));
        }
        return response.header('Content-Type', contentType).send(data);
    }
    async swaggerFile() {
        if (this.config.get('swagger.mode', 'RUNTIME') === 'RUNTIME') {
            return swagger_jsdoc_1.default(buildJsDocConfig_1.default(this.config.get('swagger.options', {})));
        }
        else if (this.config.get('swagger.mode', 'RUNTIME') === 'PRODUCTION') {
            return this.getSwaggerSpecFileContent();
        }
    }
    async getSwaggerSpecFileContent() {
        if (!this.swaggerFileContent) {
            const app = this.IoC.use('Adonis/Core/Application');
            const filePath = path_1.join(app.appRoot, this.config.get('swagger.specFilePath'));
            const fileContent = await fs_1.promises.readFile(filePath);
            this.swaggerFileContent = JSON.parse(fileContent.toString());
        }
        return this.swaggerFileContent;
    }
}
exports.SwaggerController = SwaggerController;
